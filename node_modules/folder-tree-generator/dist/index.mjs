#!/usr/bin/env node
import r from"chalk";import{program as e}from"commander";import*as o from"fs";import t from"update-notifier";import*as n from"path";var i="1.1.6",a=function r(e,o,t,n,i){for(var a in void 0===t&&(t=[]),void 0===n&&(n=0),e){var c=a,s=e[c],l=Array.isArray(s),f="string"==typeof s,p=l,y=Array.isArray(e)&&[].concat(e).pop(),d=!l&&y===s,g=l&&!s.length,u=(Array.isArray(i)&&[].concat(i).pop())===e&&g,m=o.comments&&g&&!o.folderOnly?" # Empty folder":"",h=o.emojis?f?"üìÑ ":"üìÅ ":"",v=f?s:Array.isArray(e)?null:c,x=Array.from({length:n},function(){return"‚îÇ   "}).join("");null!==v&&t.push(x+((u||d)&&n?"‚îî‚îÄ‚îÄ ":"‚îú‚îÄ‚îÄ ")+h+v+m),"object"==typeof s&&r(s,o,t,p?n+1:n,e)}return t.join("\n")},c=function(e,o){void 0===o&&(o={});try{var t=l(e,o);return"object"==typeof t?a(t,o):t}catch(e){return void(e instanceof Error&&console.log(r.bgRed.bold(" "+e.message+" ")))}},s=function r(e){var o=[];return e.filter(function(e){if("object"==typeof e)return e[Object.keys(e)[0]]=r(e[Object.keys(e)[0]]),!0}).sort(function(r,e){var o=Object.keys(r)[0],t=Object.keys(e)[0];return o<t?-1:o>t?1:0}).forEach(function(r){return o.push(r)}),e.filter(function(r){return"string"==typeof r}).sort().forEach(function(r){return o.push(r)}),o},l=function e(t,i){var a,c;void 0===i&&(i={}),i.ignore=[].concat([".vscode",".DS_Store",".git","node_modules","dist","coverage",".husky"],i.ignore&&i.ignore||[]);var l=n.basename(t);if(!o.lstatSync(t).isDirectory())return l;var f=o.readdirSync(t);if(null!=(a=i.ignore)&&a.length){var p=i.ignore.map(function(e){try{return new RegExp(e)}catch(o){throw Error(" ‚úó Incorrect Regexp: "+r.yellow("'"+e+"'")+" ")}});f=f.filter(function(r){return p.every(function(e){return!e.test(""+r)})})}var y=f.length?f.reduce(function(r,n){return r[l]=o.lstatSync(t+"/"+n).isDirectory()?[].concat(r[l]||[],[e(t+"/"+n,i)]).filter(Boolean):r[l]=Array.apply(void 0,i.folderOnly?r[l]||[]:(r[l]||[]).concat([n])),r},{}):((c={})[l]=[],c);return i.sort&&(y[l]=s(y[l])),y};if(process.argv.slice(2).length){e.version(i).option("-d, --directory [dir]","Directory path",process.cwd()).option("-f, --folder-only","Draw folders only").option("-s, --sort","Sort alphabetically and put folders first and then files").option("-c, --comments",'Show "Empty folder" comment (--folder-only must be false)').option("-e, --export [path]",'Set the folder path to export "ftg_tree_[date].txt" or just -e or --export for the default export to the current path').option("-i, --ignore [regex]",'Regex list to ignore folders and/or files (separated by commas) - eg: "example($|/.*),index.ts"').option("--emojis","Show emojis - folder: üìÅ - File: üìÑ").parse(process.argv);var f=e.opts();try{if(o.lstatSync(f.directory),f.ignore){if("string"!=typeof f.ignore)throw Error(r.bgRed.bold("‚úó Missing regex list"));f.ignore=f.ignore.split(",").map(function(r){return r.trim()})}var p=l(f.directory,f);if("object"==typeof p){var y=a(p,f);console.log(r.green("--- TREE FROM TERMINAL ---\n")),console.log(y),console.log(r.green("\n--------------------------")),f.export&&(f.export="string"!=typeof f.export?f.directory:f.export,o.writeFile(f.export+"/ftg_tree_"+(new Date).toISOString()+".txt",y,function(e){if(e)throw Error;console.log("\n "+r.green("FTG Tree has been exported into")+" "+r.yellow(f.export))}))}t({pkg:{name:"folder-tree-generator",version:i},shouldNotifyInNpmScript:!0,updateCheckInterval:0}).notify({isGlobal:!0})}catch(e){e instanceof Error&&console.log(r.bgRed.bold(" "+e.message+" "))}}export{a as drawTreeFromJsonDir,c as ftg,l as parseDirToJson,s as sortFolder};
//# sourceMappingURL=index.mjs.map
